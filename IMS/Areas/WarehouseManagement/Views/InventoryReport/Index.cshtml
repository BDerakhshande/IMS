@using System.Text.Json
@model IMS.Application.WarehouseManagement.DTOs.InventoryReportFilterDto

@{
    ViewData["Title"] = "گزارش موجودی انبارها";
    Layout = "~/Areas/WarehouseManagement/Views/Shared/_MyLayout.cshtml";
}
<style>
    /* اضافه کردن فونت اصلی */
    body {
        font-size: 0.9rem;
    }

    /* استایل‌های قبلی با تغییرات جدید */
    select.form-select[dir="rtl"],
    select.form-select.text-end {
        direction: rtl;
        text-align: right;
        padding-right: 1rem;
        padding-left: 2rem;
        background-position: left 0.75rem center !important;
        background-size: 16px 16px;
        background-repeat: no-repeat;
    }

    select.form-select,
    select.select2-hidden-accessible {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        background-image: none !important;
    }

    .table-sm-custom {
        font-size: 0.8rem;
    }

        .table-sm-custom .form-select,
        .table-sm-custom .form-control {
            font-size: 0.8rem;
            padding: 0.2rem 0.4rem;
            height: auto;
        }

        .table-sm-custom label,
        .table-sm-custom .accordion-button {
            font-size: 0.78rem;
        }

        .table-sm-custom .btn-sm {
            padding: 0.2rem 0.4rem;
            font-size: 0.75rem;
        }

    .card-header {
        padding: 0.4rem 0.8rem;
    }

    .card-body {
        padding: 0.8rem;
    }

    .form-label {
        font-size: 0.8rem;
        font-weight: 500;
        margin-bottom: 0.2rem;
    }

    .btn-xs {
        padding: 0.15rem 0.3rem;
        font-size: 0.7rem;
        line-height: 1.2;
    }

    /* استایل‌های جدید برای دکمه‌های اکشن */
    .action-buttons {
        position: relative;
        margin-bottom: 1rem;
    }

    .action-buttons-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.3rem 0;
        border-bottom: 1px solid #dee2e6;
        margin-bottom: 0.8rem;
    }

    .action-buttons-right {
        display: flex;
        gap: 0.5rem;
    }

    /* بهبود ظاهر جدول */
    .table-responsive {
        border-radius: 0.35rem;
        overflow: hidden;
    }

    .table {
        margin-bottom: 0;
    }

        .table th {
            font-size: 0.78rem;
            font-weight: 600;
            padding: 0.5rem 0.75rem;
        }

        .table td {
            font-size: 0.78rem;
            padding: 0.4rem 0.75rem;
            vertical-align: middle;
        }

    /* بهبود ظاهر هشدارها */
    .alert {
        font-size: 0.85rem;
        padding: 0.75rem 1rem;
    }

        .alert i {
            font-size: 1.5rem;
        }
</style>
<link href="~/lib/select2/css/select2.min.css" rel="stylesheet" />
<link href="~/lib/bootstrap/css/bootstrap.min.css" rel="stylesheet" />

<div class="card border-0 shadow-sm" dir="rtl">
    <div class="card-header py-1 d-flex justify-content-between align-items-center" style="background-color: #1a4959; color: white;">
        <div class="d-flex align-items-center">
            <i class="fas fa-warehouse ms-1" style="font-size: 0.85rem;"></i>
            <h5 class="mb-0 fw-bold" style="font-size: 0.9rem;">@ViewData["Title"]</h5>
        </div>
    </div>

    <div class="card-body p-2">
        <form method="post" asp-action="Index" id="inventoryReportForm">
            <!-- فیلترهای انبار -->
            <div class="card mb-4 border-primary">
                <div class="card-header bg-light-primary d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 fw-bold text-black">
                        <i class="fas fa-warehouse me-2"></i>فیلتر بر اساس انبار
                    </h6>
                </div>
                <div class="card-body">
                    <div id="warehouseFiltersContainer">
                        @for (int i = 0; i < Model.Warehouses.Count; i++)
                        {
                            var warehouse = Model.Warehouses[i];
                            <div class="warehouse-filter-group p-3 border rounded mb-3 shadow-sm">
                                <div class="row g-2">
                                    <div class="col-md-4">
                                        <label class="form-label small">انبار</label>
                                        <select name="Warehouses[@i].WarehouseId"  class="form-select form-select-sm shadow-sm" data-index="@i" onchange="loadZones(this)">
                                            <option value="">انتخاب انبار</option>
                                            @foreach (var wh in (SelectList)ViewBag.Warehouses)
                                            {
                                                <option value="@wh.Value" selected="@(wh.Value == warehouse.WarehouseId.ToString())">@wh.Text</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label small">قسمت</label>
                                        <select name="Warehouses[@i].ZoneIds"  class="form-select form-select-sm shadow-sm" data-index="@i" onchange="loadSections(this)" disabled>
                                            @if (warehouse.ZoneIds != null && warehouse.ZoneIds.Any())
                                            {
                                                @foreach (var zone in (SelectList)ViewBag.Zones)
                                                {
                                                    <option value="@zone.Value" selected="@(warehouse.ZoneIds.Contains(int.Parse(zone.Value)))">@zone.Text</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="">ابتدا انبار را انتخاب کنید</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label small">بخش‌ها</label>
                                        <select name="Warehouses[@i].SectionIds"  class="form-select form-select-sm shadow-sm" data-index="@i" disabled>
                                            @if (warehouse.SectionIds != null && warehouse.SectionIds.Any())
                                            {
                                                @foreach (var section in (SelectList)ViewBag.Sections)
                                                {
                                                    <option value="@(section.Value)" selected="@(warehouse.SectionIds.Contains(int.Parse(section.Value)))">@(section.Text)</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="">ابتدا منطقه را انتخاب کنید</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="text-end mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-danger rounded-pill" onclick="removeWarehouseFilter(this)">
                                        <i class="fas fa-times me-1"></i> حذف
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- دکمه اضافه کردن انبار جدید -->
                    <div class="text-end mt-3">
                        <button type="button" class="btn btn-sm btn-outline-primary rounded-pill" onclick="addWarehouseFilter()">
                            <i class="fas fa-plus me-1"></i> افزودن انبار دیگر
                        </button>
                    </div>
                </div>
            </div>

            <!-- فیلترهای محصول -->
            <div class="card mb-4 border-success">
                <div class="card-header bg-light-success d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 fw-bold text-black">
                        <i class="fas fa-boxes me-2"></i>فیلتر بر اساس کالا
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row g-2">
                        <div class="col-md-3">
                            <label class="form-label small">دسته‌بندی</label>
                            <select id="CategoryId" name="CategoryId" class="form-select form-select-sm shadow-sm" onchange="loadGroups(this.value)">
                                <option value="">انتخاب دسته‌بندی</option>
                                @foreach (var category in (SelectList)ViewBag.Categories)
                                {
                                    <option value="@category.Value" selected="@(category.Value == Model.CategoryId?.ToString() ? "selected" : null)">@category.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small">گروه</label>
                            <select id="GroupId" name="GroupId" class="form-select form-select-sm shadow-sm" onchange="loadStatuses(this.value)">
                                <option value="">انتخاب گروه</option>
                                @foreach (var group in (SelectList)ViewBag.Groups)
                                {
                                    <option value="@group.Value" selected="@(group.Value == Model.GroupId?.ToString() ? "selected" : null)">@group.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small">طبقه</label>
                            <select id="StatusId" name="StatusId" class="form-select form-select-sm shadow-sm" onchange="loadProducts(this.value)" @(ViewBag.Statuses != null ? "" : "disabled")>
                                <option value="">انتخاب طبقه</option>
                                @if (ViewBag.Statuses != null)
                                {
                                    foreach (var status in (SelectList)ViewBag.Statuses)
                                    {
                                        <option value="@status.Value" selected="@(status.Value == Model.StatusId?.ToString() ? "selected" : null)">@status.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small">کالا</label>
                            <select id="ProductId" name="ProductId" class="form-select form-select-sm shadow-sm" @(ViewBag.Products != null ? "" : "disabled")>
                                <option value="">ابتدا طبقه را انتخاب کنید</option>
                                @if (ViewBag.Products != null)
                                {
                                    foreach (var product in (SelectList)ViewBag.Products)
                                    {
                                        <option value="@product.Value" selected="@(product.Value == Model.ProductId?.ToString() ? "selected" : null)">@product.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-md-12 text-center">
                    <button type="submit" class="btn btn-sm btn-primary px-4 rounded-pill">
                        <i class="fas fa-search me-2"></i> جستجو
                    </button>
                    <button type="reset" class="btn btn-sm btn-outline-secondary ms-2 rounded-pill" onclick="resetForm()">
                        <i class="fas fa-undo me-2"></i> بازنشانی
                    </button>
                </div>
            </div>
        </form>
        <form method="post" asp-action="ExportToPdf" id="pdfExportForm" style="display:none;">
            @Html.AntiForgeryToken()

            @Html.HiddenFor(m => m.CategoryId)
            @Html.HiddenFor(m => m.GroupId)
            @Html.HiddenFor(m => m.StatusId)
            @Html.HiddenFor(m => m.ProductId)

            @for (int i = 0; i < Model.Warehouses.Count; i++)
            {
                @Html.HiddenFor(m => m.Warehouses[i].WarehouseId)
                @for (int j = 0; j < Model.Warehouses[i].ZoneIds.Count; j++)
                {
                    @Html.HiddenFor(m => m.Warehouses[i].ZoneIds[j])
                }
                @for (int k = 0; k < Model.Warehouses[i].SectionIds.Count; k++)
                {
                    @Html.HiddenFor(m => m.Warehouses[i].SectionIds[k])
                }
            }
        </form>
    </div>
</div>

@if ((ViewBag.SearchPerformed == true) && Model?.Items != null && Model.Items.Any())
{
    <!-- نمایش جدول گزارشات با چیدمان بهبود یافته -->
    <div class="action-buttons" dir="rtl">
        <div class="action-buttons-container">
            <h6 class="mb-0 fw-bold" style="font-size: 0.85rem;">
                <i class="fas fa-list-alt ms-1"></i> نتایج گزارش
            </h6>
            <div class="action-buttons-right">
                <button type="button" class="btn btn-sm btn-danger ms-2 rounded-pill" onclick="document.getElementById('pdfExportForm').submit();">
                    <i class="fas fa-file-pdf me-2"></i> چاپ 
                </button>
                <button type="button" class="btn btn-xs btn-outline-success rounded-pill" onclick="exportToExcel()">
                    <i class="fas fa-file-excel me-1"></i> اکسل
                </button>
            </div>
        </div>
    </div>

    <div id="reportResults" class="mt-2" dir="rtl">
        <div class="card shadow-sm">
            <div class="card-header py-1 d-flex justify-content-between align-items-center" style="background-color: #1a4959; color: white;">
                <div class="d-flex align-items-center">
                    <i class="fas fa-boxes ms-1" style="font-size: 0.8rem;"></i>
                    <h5 class="mb-0 fw-bold" style="font-size: 0.85rem;">گزارش موجودی انبار</h5>
                </div>
                <span class="badge bg-light text-dark" style="font-size: 0.75rem;">
                    مجموع: @(ViewBag.TotalQuantity != null ? ((int)ViewBag.TotalQuantity).ToString("N0") : "0")
                </span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-sm table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th scope="col" width="30%" class="text-start ps-4">محل نگهداری</th>
                                <th scope="col" width="50%" class="text-start">کالا</th>
                                <th scope="col" width="20%" class="text-end pe-4">موجودی</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Items)
                            {
                                <tr class="align-middle">
                                    <td class="text-start ps-4" title="@($"{item.WarehouseName} - {item.ZoneName ?? "-"} - {item.SectionName ?? "-"}")">
                                        <div class="small">
                                            @if (!string.IsNullOrEmpty(item.ZoneName) || !string.IsNullOrEmpty(item.SectionName))
                                            {
                                                <span>@item.WarehouseName - @(item.ZoneName ?? "-") - @(item.SectionName ?? "-")</span>
                                            }
                                            else
                                            {
                                                <span>موقعیت نامشخص</span>
                                            }
                                        </div>
                                    </td>
                                    <td class="text-start">
                                        <div class="small">
                                            @item.CategoryName - @item.GroupName - @item.StatusName - @item.ProductName
                                        </div>
                                    </td>
                                    <td class="text-end pe-4 fw-bold">
                                        <span class="badge bg-primary bg-opacity-10 text-primary">
                                            @((item.Quantity).ToString("N0"))
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
else if ((ViewBag.SearchPerformed == true) && Model?.Items != null && !Model.Items.Any())
{
    <div class="alert alert-info mt-3 text-center py-2" dir="rtl">
        <i class="fas fa-box-open fa-1x mb-2 d-block"></i>
        <h5 class="fw-semibold" style="font-size: 0.9rem;">موردی برای نمایش وجود ندارد</h5>
        <p class="text-muted mb-0" style="font-size: 0.8rem;">هیچ آیتمی با فیلترهای انتخاب شده یافت نشد.</p>
    </div>
}
else
{
    <div class="alert alert-warning mt-3 text-center py-2" dir="rtl">
        <i class="fas fa-info-circle fa-1x mb-2 d-block"></i>
        <h5 class="fw-semibold" style="font-size: 0.9rem;">لطفاً ابتدا فیلترها را انتخاب کنید</h5>
        <p class="text-muted mb-0" style="font-size: 0.8rem;">برای مشاهده گزارش، باید ابتدا پارامترهای فیلتر را تنظیم کنید.</p>
    </div>
}



@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap-5.1.3-dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/select2/js/select2.min.js"></script>
    <script src="~/js/MenuJs.js"></script>
    <script>
        const warehousesList = @Html.Raw(JsonSerializer.Serialize(
            ((SelectList)ViewBag.Warehouses).Cast<SelectListItem>()
                .Select(w => new { value = w.Value, text = w.Text })
        ));
                 


        function getWarehouseOptions() {
            if (!Array.isArray(warehousesList)) return '';
            return warehousesList.map(w => `<option value="${w.value}">${w.text}</option>`).join('');
        }

                         function printPdfReport() {
            var form = document.getElementById('inventoryReportForm');
            form.action = '/WarehouseManagement/InventoryReport/ExportToPdf'; // تغییر آدرس به اکشن پی‌دی‌اف
            form.method = 'post'; 
            form.target = '_blank'; // باز شدن در تب جدید

            form.submit();

            setTimeout(() => {
                form.action = '/WarehouseManagement/InventoryReport/Index';
                form.target = '_self';
            }, 1000);
        }



        $(document).ready(function () {





               if ($('#reportResults').length) {
            // اسکرول به div نتایج با انیمیشن نرم
            $('html, body').animate({
                scrollTop: $('#reportResults').offset().top - 100 // فاصله از بالا
            }, 500);
        }
            // فعال‌سازی Select2 برای تمام dropdownها
            initializeSelect2();

            // بارگذاری گروه‌ها اگر دسته‌بندی انتخاب شده باشد
            if ($('#CategoryId').val()) {
                loadGroups($('#CategoryId').val());
            }

            // بارگذاری مناطق و بخش‌ها برای انبارهای اولیه
            $('select[name$="WarehouseId"]').each(function () {
                if ($(this).val()) {
                    loadZones(this);
                }
            });
        });

        function initializeSelect2() {
            $('.select2-dropdown:not(.select2-hidden-accessible)').each(function () {
                const $this = $(this);
                const selectedValue = $this.val(); // ذخیره مقدار فعلی
                $this.select2({
                    placeholder: $this.attr('placeholder') || 'انتخاب کنید',
                    allowClear: true,
                    width: '100%',
                    dir: 'rtl'
                });
                // بازگرداندن مقدار انتخاب‌شده پس از مقداردهی Select2
                if (selectedValue) {
                    $this.val(selectedValue).trigger('change');
                }
            });
        }

        // بارگذاری مناطق برای انبار
        function loadZones(selectElement) {
            const warehouseId = selectElement.value;
            const index = $(selectElement).data('index');
            const zoneSelect = $(`select[name="Warehouses[${index}].ZoneIds"]`);
            const sectionSelect = $(`select[name="Warehouses[${index}].SectionIds"]`);

            zoneSelect.prop('disabled', true)
                      .html('<option value="">در حال بارگذاری...</option>')
                      .trigger('change');
            sectionSelect.prop('disabled', true)
                         .html('<option value="">ابتدا منطقه را انتخاب کنید</option>')
                         .trigger('change');

            if (!warehouseId) {
                zoneSelect.prop('disabled', true)
                          .html('<option value="">ابتدا انبار را انتخاب کنید</option>')
                          .trigger('change');
                return;
            }

            fetch(`/WarehouseManagement/InventoryReport/GetZonesByWarehouseId?warehouseId=${warehouseId}`)
                .then(response => response.json())
                .then(data => {
                    zoneSelect.empty().append('<option value="">انتخاب مناطق</option>');
                    data.forEach(zone => {
                        zoneSelect.append(new Option(zone.text, zone.value));
                    });
                    zoneSelect.prop('disabled', false).trigger('change');
                })
                .catch(error => {
                    console.error('Error loading zones:', error);
                    zoneSelect.html('<option value="">خطا در بارگذاری</option>').trigger('change');
                });
        }

        // بارگذاری بخش‌ها برای مناطق
        function loadSections(selectElement) {
            const zoneIds = Array.from(selectElement.selectedOptions).map(opt => opt.value);
            const index = $(selectElement).data('index');
            const sectionSelect = $(`select[name="Warehouses[${index}].SectionIds"]`);

            sectionSelect.prop('disabled', true)
                         .html('<option value="">در حال بارگذاری...</option>')
                         .trigger('change');

            if (!zoneIds.length) {
                sectionSelect.prop('disabled', true)
                             .html('<option value="">ابتدا منطقه را انتخاب کنید</option>')
                             .trigger('change');
                return;
            }

            fetch(`/WarehouseManagement/InventoryReport/GetSectionsByZoneIds?zoneIds=${zoneIds.join(',')}`)
                .then(response => response.json())
                .then(data => {
                    sectionSelect.empty().append('<option value="">انتخاب بخش‌ها</option>');
                    data.forEach(section => {
                        sectionSelect.append(new Option(section.text, section.value));
                    });
                    sectionSelect.prop('disabled', false).trigger('change');
                })
                .catch(error => {
                    console.error('Error loading sections:', error);
                    sectionSelect.html('<option value="">خطا در بارگذاری</option>').trigger('change');
                });
        }

        // افزودن فیلتر انبار جدید
        function addWarehouseFilter() {
            const container = $('#warehouseFiltersContainer');
            const newIndex = container.children().length;
            const optionsHtml = getWarehouseOptions();

            const filterHtml = `
                <div class="warehouse-filter-group p-3 border rounded mb-3">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">انبار</label>
                            <select name="Warehouses[${newIndex}].WarehouseId" class="form-select select2-dropdown" data-index="${newIndex}" onchange="loadZones(this)">
                    ${optionsHtml}
                </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">مناطق</label>
                            <select name="Warehouses[${newIndex}].ZoneIds"
                                    class="form-select select2-dropdown"
                                    data-index="${newIndex}"
                                    onchange="loadSections(this)"
                                    disabled>
                                <option value="">ابتدا انبار را انتخاب کنید</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">بخش‌ها</label>
                            <select name="Warehouses[${newIndex}].SectionIds"
                                    class="form-select select2-dropdown"
                                    data-index="${newIndex}"
                                    disabled>
                                <option value="">ابتدا منطقه را انتخاب کنید</option>
                            </select>
                        </div>
                    </div>
                    <div class="text-end mt-2">
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeWarehouseFilter(this)">
                            <i class="fas fa-times me-1"></i> حذف
                        </button>
                    </div>
                </div>
            `;

            container.append(filterHtml);
            initializeSelect2();
        }

        function removeWarehouseFilter(button) {
            const container = $('#warehouseFiltersContainer');

            if (container.children('.warehouse-filter-group').length > 1) {
                const filterGroup = $(button).closest('.warehouse-filter-group');

                // Destroy all select2 instances in this filter group
                filterGroup.find('select').each(function () {
                    if ($(this).hasClass('select2-hidden-accessible')) {
                        $(this).select2('destroy');
                    }
                });

                filterGroup.remove();

                // Re-index remaining filters
                container.children('.warehouse-filter-group').each(function (index) {
                    $(this).find('select[name$="WarehouseId"]')
                           .attr('name', `Warehouses[${index}].WarehouseId`)
                           .attr('data-index', index)
                           .data('index', index);

                    $(this).find('select[name$="ZoneIds"]')
                           .attr('name', `Warehouses[${index}].ZoneIds`)
                           .attr('data-index', index)
                           .data('index', index);

                    $(this).find('select[name$="SectionIds"]')
                           .attr('name', `Warehouses[${index}].SectionIds`)
                           .attr('data-index', index)
                           .data('index', index);
                });
            } else {
                alert('حداقل یک فیلتر انبار باید باقی بماند.');
            }
        }



        function loadGroups(categoryId) {
            console.log("loadGroups called with categoryId:", categoryId);

            const groupSelect = $('#GroupId');
            const statusSelect = $('#StatusId');
            const productSelect = $('#ProductId');

            groupSelect.prop('disabled', true)
                       .empty()
                       .append('<option value="">در حال بارگذاری...</option>')
                       .trigger('change');
            statusSelect.prop('disabled', true)
                        .empty()
                        .append('<option value="">ابتدا گروه را انتخاب کنید</option>')
                        .trigger('change');
            productSelect.prop('disabled', true)
                         .empty()
                         .append('<option value="">ابتدا وضعیت را انتخاب کنید</option>')
                         .trigger('change');

            if (!categoryId) {
                console.warn("هیچ دسته‌بندی انتخاب نشده است");
                groupSelect.empty()
                           .append('<option value="">انتخاب دسته‌بندی</option>')
                           .trigger('change');
                return;
            }

            const url = `/WarehouseManagement/InventoryReport/GetGroupsByCategoryId?categoryId=${categoryId}`;
            console.log("Fetching groups from:", url);

            fetch(url)
                .then(response => {
                    console.log("Fetch response status:", response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Groups fetched:", data);

                    groupSelect.empty().append('<option value="">همه گروه‌ها</option>');

                            data.forEach(group => {
            groupSelect.append(new Option(group.text, group.value));
        });


                    groupSelect.prop('disabled', false).trigger('change');

                   const selectedGroupId = "@(Model.GroupId?.ToString() ?? "")";


                    console.log("Selected group ID from model:", selectedGroupId);

                          if (selectedGroupId) {

                        groupSelect.val(selectedGroupId).trigger('change');
                        loadStatuses(selectedGroupId);
                    }
                })
                .catch(error => {
                    console.error('Error loading groups:', error.message, error.stack);
                    groupSelect.html(`<option value="">خطا در بارگذاری: ${error.message}</option>`).trigger('change');
                });
        }
        function loadStatuses(groupId) {
            console.log("loadStatuses called with groupId:", groupId);

            const statusSelect = $('#StatusId');
            const productSelect = $('#ProductId');

            statusSelect.prop('disabled', true)
                        .empty()
                        .append('<option value="">در حال بارگذاری...</option>')
                        .trigger('change');
            productSelect.prop('disabled', true)
                         .empty()
                         .append('<option value="">ابتدا وضعیت را انتخاب کنید</option>')
                         .trigger('change');

            if (!groupId) {
                console.warn("هیچ گروهی انتخاب نشده است");
                statusSelect.empty()
                            .append('<option value="">انتخاب گروه</option>')
                            .trigger('change');
                return;
            }

            const url = `/WarehouseManagement/InventoryReport/GetStatusesByGroupId?groupId=${groupId}`;
            console.log("Fetching statuses from:", url);

            fetch(url)
                .then(response => {
                    console.log("Fetch response status:", response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Statuses fetched:", data);

                    statusSelect.empty().append('<option value="">همه وضعیت‌ها</option>');

                            data.forEach(status => {
            statusSelect.append(new Option(status.text, status.value));
        });


                    statusSelect.prop('disabled', false).trigger('change');

                   const selectedStatusId = "@(Model.StatusId?.ToString() ?? "")";

                    console.log("Selected status ID from model:", selectedStatusId);

                           if (selectedStatusId) {
                        statusSelect.val(selectedStatusId).trigger('change');
                        loadProducts(selectedStatusId);
                    }
                })
                .catch(error => {
                    console.error('Error loading statuses:', error.message, error.stack);
                    statusSelect.html(`<option value="">خطا در بارگذاری: ${error.message}</option>`).trigger('change');
                });
        }

        function loadProducts(statusId) {
            console.log("loadProducts called with statusId:", statusId);

            const productSelect = $('#ProductId');

            productSelect.prop('disabled', true)
                         .empty()
                         .append('<option value="">در حال بارگذاری...</option>')
                         .trigger('change');

            if (!statusId) {
                console.warn("هیچ وضعیتی انتخاب نشده است");
                productSelect.empty()
                             .append('<option value="">انتخاب وضعیت</option>')
                             .trigger('change');
                return;
            }

            const url = `/WarehouseManagement/InventoryReport/GetProductsByStatusId?statusId=${statusId}`;
            console.log("Fetching products from:", url);

            fetch(url)
                .then(response => {
                    console.log("Fetch response status:", response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Products fetched:", data);

                    productSelect.empty().append('<option value="">همه کالاها</option>');

                    data.forEach(product => {
                        console.log("Appending product:", product);
                        // استفاده از text و value به جای name و id
                        productSelect.append(new Option(product.text, product.value));
                    });

                    productSelect.prop('disabled', false).trigger('change');

                    // مقداردهی Razor به شکل امن و رشته‌ای
                    const selectedProductId = "@(Model.ProductId?.ToString() ?? "")";
                    console.log("Selected product ID from model:", selectedProductId);

                    if (selectedProductId) {
                        productSelect.val(selectedProductId).trigger('change');
                    }
                })
                .catch(error => {
                    console.error('Error loading products:', error.message, error.stack);
                    productSelect.html(`<option value="">خطا در بارگذاری: ${error.message}</option>`).trigger('change');
                });
        }


        function resetForm() {
            const form = document.getElementById('inventoryReportForm');
            form.reset();

            // اگر از select2 استفاده می‌کنی، باید select2 رو هم ریست کنی
            $('.select2-dropdown').each(function() {
                $(this).val(null).trigger('change');
            });

            // اگر بخوای فیلترهای انبار رو هم به حالت اولیه برگردونی (مثلاً فقط یک فیلتر داشته باشی)
            const container = $('#warehouseFiltersContainer');
            if (container.children().length > 1) {
                container.children('.warehouse-filter-group').not(':first').each(function() {
                    $(this).find('.select2-dropdown').select2('destroy');
                    $(this).remove();
                });
                // ریست select2 های باقی‌مانده
                container.children().find('.select2-dropdown').val(null).trigger('change');
            }
        }
            function printReport() {
            window.print();
        }

        async function exportToExcel() {
            const filter = @Html.Raw(JsonSerializer.Serialize(Model));

            try {
                const response = await fetch('@Url.Action("ExportInventoryToExcel", "InventoryReport", new { area = "WarehouseManagement" })', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(filter)
                });

                if (!response.ok) throw new Error('خطا در دریافت فایل اکسل.');

                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `InventoryReport_${new Date().toISOString().slice(0,19).replace(/[:T]/g, '')}.xlsx`;
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
            }
            catch (err) {
                alert(err.message);
            }
        }

    </script>
}